# frozen_string_literal: true

require_relative 'config'
require_relative './common/checker_statuses'

require 'socket'

# rubocop:disable Style/MultilineTernaryOperator, Style/GlobalVars

# data = 'asdf'
data = ARGV[0]
# from_user_telegram_id = '1964112204'
from_user_telegram_id = ARGV[1]
# group_chat_id = '-1001979775757'
group_chat_id = ARGV[2]

$user = User.find_by(telegram_id: from_user_telegram_id)
$lg = $user.lg

def is_telegram_id(text)
  text =~ /^\d+$/
end

def user_exist_and_scamer?(_data)
  return false if $userTo.nil?

  $userTo.status =~ /^scamer/
end

bot = Telegram::Bot::Client.new(ENV['TOKEN_MAIN'])
res = bot.api.send_message(
  chat_id: group_chat_id || $user.telegram_id,
  text: Text.checking
)
message_id = res['result']['message_id']
$userTo =  if is_telegram_id(data)
             User.find_by(telegram_id: data)
           else
             User.find_by(
               username: data[0] == '@' ?
                   data.slice(1) :
                   data
             )
           end

formatted_data = if is_telegram_id(data)
                   data
                 else
                   data[0] === '@' ?
                           data :
                           "@#{data}"
                 end

response = nil
begin
  # Create a TCP socket
  hostname = 'localhost'
  port = 3500

  socket = TCPSocket.open(hostname, port)

  # Send a string to Python
  string_to_send = "/telegram_id/#{formatted_data}"
  socket.puts(string_to_send)

  # Receive the response from Python
  socket.close_write # Without this line, the next line hangs
  response = socket.read
  # puts response

  # Close the socket
  socket.close
rescue StandardError => e
  # puts exception
end

def delete_text_after_char(str, char)
  last_index = str.rindex(char)
  str.slice(0, last_index + 1)
end

def formating_month(old_month)
  case old_month
  when '—è–Ω–≤' then '01'
  when '—Ñ–µ–≤' then '02'
  when '–º–∞—Ä' then '03'
  when '–∞–ø—Ä' then '04'
  when '–º–∞–π' then '05'
  when '–∏—é–Ω' then '06'
  when '–∏—é–ª' then '07'
  when '–∞–≤–≥' then '08'
  when '—Å–µ–Ω' then '09'
  when '–æ–∫—Ç' then '10'
  when '–Ω–æ—è' then '11'
  when '–¥–µ–∫' then '12'
  end
end

def date_formatting(line)
  old_date = line.split('‚âà').last
  old_month = old_date.split(',').first
  year = old_date.split(' ').first.split(',').last
  years_amount = old_date.split('(').last.split(' ').first
  month = formating_month(old_month)
  years_text = years_amount.to_i > 1 ? 'years' : 'year'
  "#{month}/#{year} (#{years_amount} #{years_text})"
end

def to_UTF8(text)
  text.force_encoding('UTF-8').encode('UTF-8', invalid: :replace, undef: :replace, replace: '')
end

def formatting_lines(lines)
  stop_words = ['–¢–µ–ª–µ—Ñ–æ–Ω', '–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞']
  change_words = [
    { exist: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', new: 'Account Creation Date' },
    { exist: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', new: 'Profile changes' }
  ]
  new_lines = []
  lines.each do |line|
    next if  line.nil? || line.empty?

    formatted_line = to_UTF8(line)
    is_in_stop = false
    # —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å—Ç—Ä–æ–∫
    stop_words.each do |word|
      is_in_stop = true if formatted_line.include?(word)
    end
    # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Å–ª–æ–≤
    change_words.each do |word|
      next unless formatted_line.include?(word[:exist])

      if word[:exist] == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        formatted_date = date_formatting(formatted_line)
        formatted_line = formatted_line.gsub('`', '')
        formatted_line = formatted_line.split('‚âà').first + '‚âà' + formatted_date
      end
      formatted_line = formatted_line.gsub(word[:exist], word[:new])
    end
    new_lines.push(formatted_line) unless is_in_stop
  end
  new_lines
end

def format_res(res)
  # –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  # —É–±—Ä–∞—Ç—å –Ω–µ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
  utf8 = to_UTF8(res)
  lines = utf8.split("\n")

  new_lines = [lines[0], lines[1]] # –ø–µ—Ä–≤—ã–µ 2-–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω—ã
  # need_words_in_line = ['–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è']

  flag = false
  lines.each do |line|
    new_lines.push(line) if line.include?('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')

    if flag && !line.empty? # —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
      new_lines.push(line)
    else
      flag = false
    end

    if line.include?('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')
      new_lines.push(line)
      flag = true
    end
  end
  # if utf8.include?('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')
  #     # –∫–æ–≥–¥–∞ –µ—Å—Ç—å '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
  #     text =  delete_text_after_char(res, '|')
  # end

  # # –∫–æ–≥–¥–∞ –Ω–µ—Ç—É '–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è'
  # lines = text&.split("\n") || res.split("\n")

  # if !utf8.include?('–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è')
  #     lines = lines.slice(0, 3)
  # end

  formatted_lines = formatting_lines(new_lines)
  formatted_lines.join("\n")
end

# is_res_error = response.present? && response == 'Error'

result_message = if !response.present? || (response.present? && response == 'Error') || format_res(response).include?('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ')
                   Text.not_availible
                 else
                   format_res(response)
                 end
# is_res_error || format_res(response).include?('–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ') ?
# Text.not_availible :

answer = if result_message.include?('_')
           result_message.gsub(/_/, '\\\\_')
         else
           result_message
         end

bot.api.delete_message(chat_id: group_chat_id || $user.telegram_id, message_id:)
bot.api.send_message(chat_id: group_chat_id || $user.telegram_id, text: answer, parse_mode: 'Markdown')
def notify_scammer
  #   return 'üö© –í–∞—à –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –∫–∏–¥–∫–æ–≤!' if $lg == Ru
  #   return 'üö© Your counterparty has been found on the rippers wall!' if $lg == En
  #   return 'üö© ¬°Su contratante ha sido encontrado en la lista de estafadores!' if $lg == Es

  #   'üö© ÊÇ®ÁöÑ‰∫§ÊòìÂØπÊâãË¢´ÂèëÁé∞Âú®È™óÂ≠êÂêçÂçï‰∏äÔºÅ' if $lg == Cn
  return 'üö© Your counterparty has been found on the rippers wall!' if $lg == Ru
  return 'üö© Your counterparty has been found on the rippers wall!' if $lg == En
  return 'üö© Your counterparty has been found on the rippers wall!' if $lg == Es

  'üö© Your counterparty has been found on the rippers wall!' if $lg == Cn
end

def notify_complaint(complaint)
  #   if $lg == Ru
  #     return "–ñ–∞–ª–æ–±–∞ #N#{complaint.id} –æ—Ç #{complaint.created_at.strftime('%d.%m.%Y')}:\n–°—Å—ã–ª–∫–∞ <a href='#{complaint.telegraph_link}'>telegraph_link</a>"
  #   end
  #   if $lg == En
  #     return "Report #N#{complaint.id} from #{complaint.created_at.strftime('%d.%m.%Y')}:\nLink <a href='#{complaint.telegraph_link}'>telegraph_link</a>"
  #   end
  #   if $lg == Es
  #     return "Informe #N#{complaint.id} del #{complaint.created_at.strftime('%d.%m.%Y')}:\nEnlace <a href='#{complaint.telegraph_link}'>telegraph_link</a>"
  #   end
  #   return unless $lg == Cn

  #   "Êä•Âëä #N#{complaint.id} Êó•Êúü #{complaint.created_at.strftime('%d.%m.%Y')}:\nÈìæÊé• <a href='#{complaint.telegraph_link}'>telegraph_link</a>"
  if $lg == Ru
    return "Report #N#{complaint.id} dated #{complaint.created_at.strftime('%d %b %Y')}:\üí• <a href='#{complaint.telegraph_link}'>CHECK THE REPORT OUT</a>"
  end
  if $lg == En
    return "Report #N#{complaint.id} dated #{complaint.created_at.strftime('%d %b %Y')}:\üí• <a href='#{complaint.telegraph_link}'>CHECK THE REPORT OUT</a>"
  end
  if $lg == Es
    return "Report #N#{complaint.id} dated #{complaint.created_at.strftime('%d %b %Y')}:\üí• <a href='#{complaint.telegraph_link}'>CHECK THE REPORT OUT</a>"
  end
  return unless $lg == Cn

  "Report #N#{complaint.id} dated #{complaint.created_at.strftime('%d %b %Y')}:\üí• <a href='#{complaint.telegraph_link}'>CHECK THE REPORT OUT</a>"
end

# Report #N7 dated 11.14.2023: (–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —ç—Ç–æ!!!!)

if user_exist_and_scamer?(data)
  bot.api.send_message(chat_id: group_chat_id || $user.telegram_id, text: notify_scammer)
  accepted_complaints = Complaint.where(telegram_id: $userTo.telegram_id).where(status: 'accepted_complaint')
  if accepted_complaints.any?
    accepted_complaints.each do |complaint|
      bot.api.send_message(chat_id: group_chat_id || $user.telegram_id, text: notify_complaint(complaint),
                           parse_mode: 'HTML')
    end
  end
end

#  /verifying by id | username

# def result_of_verifying_local(user, group_chat_id, data, bot)
#   #   puts user
#   # puts data
#   if user.present? && user.status =~ /^scamer/
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id, text: Text.verifying_user(user, 'scamer', data),
#                          parse_mode: 'HTML')
#   elsif user.present? && user.status =~ /^verified/
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id,
#                          text: Text.verifying_user(user, 'verified', data), parse_mode: 'HTML')
#   elsif user.present? && user.status =~ /^not_scamer/
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id,
#                          text: Text.verifying_user(user, 'not_scamer', data), parse_mode: 'HTML')
#   elsif user.nil?
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id,
#                          text: Text.verifying_user(user, 'not_scamer', data), parse_mode: 'HTML')
#   elsif user.present? && user.status =~ /trusted/
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id,  text: Text.verifying_user(user, 'trusted', data),
#                          parse_mode: 'HTML')
#   elsif user.present? && user.status =~ /dwc/
#     bot.api.send_message(chat_id: group_chat_id || $user.telegram_id,  text: Text.verifying_user(user, 'dwc', data),
#                          parse_mode: 'HTML')
#   end
# end

def handle_verify_with_id_or_username(data, group_chat_id, _bot)
  user = if data =~ /^-?\d+$/ # telegram_id
           User.find_by(telegram_id: data)
         else # username
           User.find_by(username: data.sub('@', ''))
         end
  CheckerStatuses.view_status(user, data, chat_id: group_chat_id)
  # result_of_verifying_local(user, group_chat_id, data, bot)
end

handle_verify_with_id_or_username(data, group_chat_id, bot)
# rubocop:enable Style/MultilineTernaryOperator, Style/GlobalVars
